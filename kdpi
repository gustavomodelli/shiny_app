library(shiny)
library(xgboost)
library(dplyr)

# Carrega o modelo de ML treinado
model <- readRDS('model_egfr.RDS')

# Função KFRE 5 anos
kfremodel_new <- function(age, sex, egfr, acr) {
  safe_egfr <- pmax(egfr, 1)
  safe_acr  <- pmax(acr, 1)
  ln_acr <- log(safe_acr)
  
  formula <- (0.2694 * sex) + 
    (-0.21670 * (age/10)) + 
    (-0.55418 * (safe_egfr/5)) + 
    (0.45608 * ln_acr)
  
  lp_shifted <- formula + 2.96774
  risk <- 1 - 0.924^(exp(lp_shifted))
  return(risk)
}

ui <- fluidPage(
  titlePanel("KFRE PRO v3.3 - Adulto e Pediatria"),
  
  tabsetPanel(
    
    # Aba principal de cálculo
    tabPanel("Calculadora",
      sidebarLayout(
        sidebarPanel(
          numericInput("age", "Idade (anos):", value = 50, min = 0, max = 120),
          numericInput("cretmg", "Creatinina (mg/dL):", value = 1.2, min = 0.1, max = 20),
          selectInput("sexe_male", "Sexo:", choices = c("Masculino" = 1, "Feminino" = 0)),
          
          uiOutput("method_selector"),
          
          tags$hr(),
          tags$b("⚠ Altura (apenas para crianças - Bedside Schwartz)"),
          numericInput("height", "Altura (cm):", value = 160, min = 30, max = 220),
          
          tags$hr(),
          tags$b("⚠ ACR (Albumina/Creatinina mg/g):"),
          numericInput("acr", "ACR (mg/g):", value = 50, min = 0.1, max = 5000),
          
          tags$hr(),
          actionButton("predict_btn", "Calcular")
        ),
        
        mainPanel(
          h3("Resultados:"),
          htmlOutput("prediction_results"),
          tags$hr(),
          htmlOutput("kfre_kdigo")
        )
      )
    ),
    
    # Aba de Referências e Contato
    tabPanel("Referências e Contato",
      tags$h4("Referências utilizadas:"),
      tags$ul(
        tags$li("Tangri N, Stevens LA, Griffith J, et al. JAMA. 2011;305(15):1553-9."),
        tags$li("Tangri N, Grams ME, Levey AS, et al. JAMA. 2016;315(2):164-74."),
        tags$li("KDIGO 2012 Clinical Practice Guideline. Kidney Int Suppl. 2013;3(1):1–150."),
        tags$li("Levey AS, Stevens LA, Schmid CH, et al. Ann Intern Med. 2009;150(9):604–612."),
        tags$li("Andrade LGM, et al. FAPESP Project.")
      ),
      tags$hr(),
      tags$h5("Desenvolvedor da aplicação:"),
      tags$p("Luis Gustavo Modelli de Andrade"),
      tags$p("E-mail: gustavo.modelli@unesp.br"),
      tags$hr(),
      tags$p("Esta ferramenta não substitui o julgamento médico. Uso exclusivo para apoio à decisão clínica.")
    )
  )
)

server <- function(input, output, session) {
  
  # Escolha do método de eGFR
  output$method_selector <- renderUI({
    if (input$age < 18) {
      radioButtons("egfr_method", "Escolher método de eGFR:",
                   choices = c("Machine Learning" = "ml", "Bedside Schwartz" = "schwartz"),
                   selected = "ml")
    } else {
      radioButtons("egfr_method", "Escolher método de eGFR:",
                   choices = c("Machine Learning" = "ml", "CKD-EPI 2021" = "ckdepi"),
                   selected = "ml")
    }
  })
  
  # Cálculos principais
  prediction_result <- eventReactive(input$predict_btn, {
    age <- input$age
    cretmg <- input$cretmg
    sexe_num <- as.numeric(input$sexe_male)
    height_cm <- input$height
    acr <- input$acr
    
    new_data <- data.frame(
      age = age,
      cretmg = cretmg,
      sexe_male = sexe_num
    )
    
    new_data_matrix <- as.matrix(new_data)
    predicted_ml <- predict(model, new_data_matrix)
    predicted_ml <- max(predicted_ml, 0.1)
    
    sexe_text <- ifelse(sexe_num == 1, "male", "female")
    
    predicted_ckdepi <- NA
    if (age >= 18) {
      predicted_ckdepi <- case_when(
        sexe_text == "female" & cretmg <= 0.7 ~ 143 * ((cretmg/0.7)^-0.241) * (0.9938^age),
        sexe_text == "female" & cretmg > 0.7 ~ 143 * ((cretmg/0.7)^-1.200) * (0.9938^age),
        sexe_text == "male" & cretmg <= 0.9 ~ 142 * ((cretmg/0.9)^-0.302) * (0.9938^age),
        sexe_text == "male" & cretmg > 0.9 ~ 142 * ((cretmg/0.9)^-1.200) * (0.9938^age)
      )
    }
    
    predicted_schwartz <- if (age < 18) 0.413 * (height_cm / cretmg) else NA
    
    # Seleção final do eGFR
    eGFR_final <- if (input$egfr_method == "ml") {
      predicted_ml
    } else if (input$egfr_method == "ckdepi") {
      predicted_ckdepi
    } else if (input$egfr_method == "schwartz") {
      predicted_schwartz
    } else {
      predicted_ml
    }
    
    risk_5yr <- if (age >= 18) {
      kfremodel_new(age, sexe_num, eGFR_final, acr)
    } else {
      NA
    }
    
    list(
      ml = predicted_ml, 
      ckdepi = predicted_ckdepi, 
      schwartz = predicted_schwartz,
      eGFR_final = eGFR_final,
      kfre_5yr = risk_5yr,
      acr = acr,
      age = age
    )
  })
  
  # Exibir eGFRs calculados
  output$prediction_results <- renderUI({
    req(prediction_result())
    res <- prediction_result()
    
    out <- paste0("<b>eGFR (Machine Learning):</b> ", round(res$ml, 2), " ml/min/1.73m²<br>")
    
    if (!is.na(res$ckdepi)) {
      out <- paste0(out, "<b>eGFR (CKD-EPI 2021):</b> ", round(res$ckdepi, 2), " ml/min/1.73m²<br>")
    }
    if (!is.na(res$schwartz)) {
      out <- paste0(out, "<b>eGFR (Bedside Schwartz):</b> ", round(res$schwartz, 2), " ml/min/1.73m²<br>")
    }
    HTML(out)
  })
  
  # Exibir KDIGO + KFRE com interpretações
  output$kfre_kdigo <- renderUI({
    req(prediction_result())
    res <- prediction_result()
    
    egfr <- res$eGFR_final
    acr <- res$acr
    age <- res$age
    
    gfr_stage <- ifelse(egfr >= 90, "G1",
                  ifelse(egfr >= 60, "G2",
                  ifelse(egfr >= 45, "G3a",
                  ifelse(egfr >= 30, "G3b",
                  ifelse(egfr >= 15, "G4", "G5")))))
    
    acr_stage <- ifelse(acr < 30, "A1",
                  ifelse(acr <= 300, "A2", "A3"))
    
    kdigo_color <- ifelse(
      gfr_stage == "G1" & acr_stage == "A1", "green",
      ifelse(gfr_stage == "G1" & acr_stage == "A2", "yellow",
      ifelse(gfr_stage == "G1" & acr_stage == "A3", "orange",
      ifelse(gfr_stage == "G2" & acr_stage == "A1", "green",
      ifelse(gfr_stage == "G2" & acr_stage == "A2", "yellow",
      ifelse(gfr_stage == "G2" & acr_stage == "A3", "orange",
      ifelse(gfr_stage == "G3a" & acr_stage == "A1", "yellow",
      ifelse(gfr_stage == "G3a" & acr_stage == "A2", "orange",
      ifelse(gfr_stage == "G3a" & acr_stage == "A3", "red",
      ifelse(gfr_stage == "G3b" & acr_stage == "A1", "orange",
      ifelse(gfr_stage == "G3b" & acr_stage == "A2", "red",
      ifelse(gfr_stage == "G3b" & acr_stage == "A3", "red",
      ifelse(gfr_stage == "G4", "red", "red")))))))))))))
    
    kdigo_label <- ifelse(kdigo_color == "green", "Baixo risco",
                     ifelse(kdigo_color == "yellow", "Risco moderado",
                     ifelse(kdigo_color == "orange", "Alto risco", "Risco muito alto")))
    
    out <- paste0("<b>Classificação KDIGO: </b><span style='color:", kdigo_color, "; font-weight:bold;'>",
                  gfr_stage, acr_stage, "</span> - ", kdigo_label, "<br>",
                  "(GFR: ", round(egfr,1), " ml/min/1.73m²; ACR: ", acr, " mg/g)<br><br>")
    
    if (age >= 18) {
      risk_percent <- round(res$kfre_5yr * 100, 1)
      risk_color <- ifelse(risk_percent <= 5, "green",
                           ifelse(risk_percent <= 15, "orange", "red"))
      
      kfre_label <- ifelse(risk_percent <= 5, "Baixo risco de progressão",
                      ifelse(risk_percent <= 15, "Risco moderado de progressão", 
                      "Alto risco de progressão"))
      
      out <- paste0(out, "<b>Risco KFRE 5 anos: </b><span style='color:", risk_color, "; font-weight:bold;'>",
                    risk_percent, "%</span> - ", kfre_label)
    } else {
      out <- paste0(out, "<b>⚠ KFRE não validado para idade < 18 anos</b>")
    }
    
    HTML(out)
  })
}

shinyApp(ui = ui, server = server)
