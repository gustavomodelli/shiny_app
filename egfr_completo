library(shiny)
library(xgboost)
library(dplyr)

# Load your trained ML model
model <- readRDS('model_egfr.RDS')

ui <- fluidPage(
  titlePanel("Estimativa de eGFR: Machine Learning, CKD-EPI 2021, Bedside Schwartz e KFRE"),
  
  sidebarLayout(
    sidebarPanel(
      numericInput("age", "Idade (anos):", value = 44, min = 0, max = 120),
      numericInput("cretmg", "Creatinina (mg/dL):", value = 1.1, min = 0.1, max = 20),
      selectInput("sexe_male", "Sexo:", choices = c("Masculino" = 1, "Feminino" = 0)),
      
      tags$hr(),
      tags$b("⚠ Altura (apenas para crianças - Bedside Schwartz)"),
      numericInput("height", "Altura (cm):", value = 160, min = 30, max = 220),
      
      tags$hr(),
      tags$b("⚠ ACR (Apenas para KFRE)"),
      numericInput("acr", "Albumina/Creatinina (mg/g):", value = 30, min = 0.1, max = 5000),
      
      radioButtons("kfre_model", "Modelo KFRE:", choices = c("Canadense" = "canada", "Outro" = "other")),
      
      tags$hr(),
      actionButton("predict_btn", "Calcular")
    ),
    
    mainPanel(
      h3("Resultados:"),
      htmlOutput("prediction_ml"),
      htmlOutput("prediction_ckdepi"),
      htmlOutput("prediction_schwartz"),
      tags$hr(),
      h3("Risco de Progressão (KFRE):"),
      htmlOutput("kfre_2yr"),
      htmlOutput("kfre_5yr")
    )
  )
)

server <- function(input, output) {
  
  prediction_result <- eventReactive(input$predict_btn, {
    
    # Machine Learning Prediction
    new_data <- data.frame(
      age = input$age,
      cretmg = input$cretmg,
      sexe_male = as.numeric(input$sexe_male)
    )
    
    new_data_matrix <- as.matrix(new_data)
    predicted_ml <- predict(model, new_data_matrix)
    
    # CKD-EPI 2021 (somente se idade >= 18)
    sexe_text <- ifelse(as.numeric(input$sexe_male) == 1, "male", "female")
    age <- input$age
    cretmg <- input$cretmg
    
    predicted_ckdepi <- NA
    if (age >= 18) {
      predicted_ckdepi <- case_when(
        sexe_text == "female" & cretmg <= 0.7 ~ 143 * ((cretmg/0.7)^-0.241) * (0.9938^age),
        sexe_text == "female" & cretmg > 0.7 ~ 143 * ((cretmg/0.7)^-1.200) * (0.9938^age),
        sexe_text == "male" & cretmg <= 0.9 ~ 142 * ((cretmg/0.9)^-0.302) * (0.9938^age),
        sexe_text == "male" & cretmg > 0.9 ~ 142 * ((cretmg/0.9)^-1.200) * (0.9938^age)
      )
    }
    
    # Bedside Schwartz (apenas se idade < 18)
    predicted_schwartz <- NA
    if (age < 18) {
      height_cm <- input$height
      predicted_schwartz <- 0.413 * (height_cm / cretmg)
    }
    
    # KFRE calculation using ML-predicted eGFR
    acr <- input$acr
    sex_num <- as.numeric(input$sexe_male)
    ln_egfr <- log(predicted_ml)
    ln_acr <- log(acr)
    
    # Coefficients from Tangri 2011 (Canada model)
    if (input$kfre_model == "canada") {
      intercept_2yr <- -10.59
      intercept_5yr <- -9.17
      baseline_2yr <- 0.9904
      baseline_5yr <- 0.9688
    } else {
      # placeholder for recalibrated values
      intercept_2yr <- -9.2
      intercept_5yr <- -7.9
      baseline_2yr <- 0.993
      baseline_5yr <- 0.975
    }
    
    # β Coefficients (they stay the same for both)
    beta_age <- 0.055
    beta_sex <- 0.489
    beta_ln_egfr <- -0.556
    beta_ln_acr <- 0.451
    
    lp_2yr <- intercept_2yr + beta_age * age + beta_sex * sex_num + beta_ln_egfr * ln_egfr + beta_ln_acr * ln_acr
    lp_5yr <- intercept_5yr + beta_age * age + beta_sex * sex_num + beta_ln_egfr * ln_egfr + beta_ln_acr * ln_acr
    
    risk_2yr <- 1 - (baseline_2yr ^ exp(lp_2yr))
    risk_5yr <- 1 - (baseline_5yr ^ exp(lp_5yr))
    
    list(
      ml = predicted_ml, 
      ckdepi = predicted_ckdepi, 
      schwartz = predicted_schwartz,
      kfre_2yr = risk_2yr, 
      kfre_5yr = risk_5yr
    )
  })
  
  output$prediction_ml <- renderUI({
    req(prediction_result())
    HTML(paste0("<span style='color:blue;'>eGFR (Machine Learning): ", 
                round(prediction_result()$ml, 2), " ml/min/1.73m²</span>"))
  })
  
  output$prediction_ckdepi <- renderUI({
    req(prediction_result())
    if (!is.na(prediction_result()$ckdepi)) {
      HTML(paste0("<span style='color:blue;'>eGFR (CKD-EPI 2021): ", 
                  round(prediction_result()$ckdepi, 2), " ml/min/1.73m²</span>"))
    } else {
      HTML("<span style='color:red;'>CKD-EPI 2021 não aplicável para idade < 18 anos.</span>")
    }
  })
  
  output$prediction_schwartz <- renderUI({
    req(prediction_result())
    if (!is.na(prediction_result()$schwartz)) {
      HTML(paste0("<span style='color:blue;'>eGFR (Bedside Schwartz): ", 
                  round(prediction_result()$schwartz, 2), " ml/min/1.73m²</span>"))
    } else {
      HTML("<span style='color:red;'>Bedside Schwartz não aplicável para idade ≥ 18 anos.</span>")
    }
  })
  
  output$kfre_2yr <- renderUI({
    req(prediction_result())
    HTML(paste0("<b>Risco 2 anos (KFRE): </b>", round(prediction_result()$kfre_2yr*100, 1), "%"))
  })
  
  output$kfre_5yr <- renderUI({
    req(prediction_result())
    HTML(paste0("<b>Risco 5 anos (KFRE): </b>", round(prediction_result()$kfre_5yr*100, 1), "%"))
  })
  
}

shinyApp(ui = ui, server = server)
